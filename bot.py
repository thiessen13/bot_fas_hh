from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from typing import Final
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler, CallbackQueryHandler, CallbackContext
from telegram import KeyboardButton, ReplyKeyboardMarkup
import os


# constants


TOKEN = os.getenv("BOT_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_NAME: Final = '@far_hamburg_bot'
ASKING_MESSAGE, ASKING_LANGUAGE = range(2)
# anastas as an admin
ADMIN_ID: Final = '328310817'
GROUP_ID: Final = '-4757667404'
#####################################################################

# language keyboard

user_lang = {}
language_keyboard = ReplyKeyboardMarkup([
    [KeyboardButton('Deutsch'), KeyboardButton('–†—É—Å—Å–∫–∏–π')]
], resize_keyboard=True)

# inline menu 
inline_keyboard_de = [
    [InlineKeyboardButton("1Ô∏è‚É£Dem FAR-Chat beitreten", callback_data="join_chat")],
    [InlineKeyboardButton("2Ô∏è‚É£Mitglied der Zelle werden", callback_data="join")],
    [InlineKeyboardButton("3Ô∏è‚É£Zusammenarbeit vorschlagen", callback_data="cooperate")],
    [InlineKeyboardButton("4Ô∏è‚É£Eine Frage stellen", callback_data="question")],
    [InlineKeyboardButton("5Ô∏è‚É£Mehr √ºber FAR Hamburg", callback_data="about")],
]

inline_keyboard_ru = [
    [InlineKeyboardButton("1Ô∏è‚É£–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏:—Ü", callback_data="join_chat")],
    [InlineKeyboardButton("2Ô∏è‚É£–°—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏:—Ü–µ–π —è—á–µ–π–∫–∏", callback_data="join")],
    [InlineKeyboardButton("3Ô∏è‚É£–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="cooperate")],
    [InlineKeyboardButton("4Ô∏è‚É£–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="question")],
    [InlineKeyboardButton("5Ô∏è‚É£–£–∑–Ω–∞—Ç—å –æ –§–ê–° –ì–∞–º–±—É—Ä–≥", callback_data="about")],
]
#####################################################################

# store user language preference and chosen topic
user_data = {}

#####################################################################

# Language selection handler

async def handle_language(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_data[user_id] = {'language': update.message.text.lower()}

    if user_data[user_id]['language'] == 'deutsch':
        await update.message.reply_text("Du hast Deutsch gew√§hlt. Was m√∂chtest du wissen?", reply_markup=InlineKeyboardMarkup(inline_keyboard_de))
    elif user_data[user_id]['language'] == '—Ä—É—Å—Å–∫–∏–π':
        await update.message.reply_text("–¢—ã –≤—ã–±—Ä–∞–ª:–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª:–∏ —É–∑–Ω–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(inline_keyboard_ru))
    else:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. // Bitte w√§hle eine Sprache mit der Tastatur.')
        return ASKING_LANGUAGE

    return ASKING_MESSAGE

# topic selection handler
async def handle_inline_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_lang = user_data.get(user_id, {}).get('language', 'deutsch')
    user_data[user_id]['topic'] = query.data  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–µ–º—É

    chosen_topic = ""

    if user_lang == 'deutsch':
        if query.data == 'join':
            chosen_topic = "Mitglied werden"
            await query.message.reply_text(text="Du willst aktiv werden und Teil unserer Zelle werden? Gro√üartig!üå±\nErz√§hl uns kurz etwas √ºber dich ‚Äì unsere Koordinator:in wird sich bei dir melden, um alles Weitere zu besprechen.\n‚ÄºÔ∏èBitte schreibe alles in einer Nachricht ‚Äì wir bekommen nur die erste angezeigt!"),
            parse_mode='Markdown'
        elif query.data == 'join_chat':
            await query.message.reply_text(
            "Im Unterst√ºtzer*innen-Chat von FAR Hamburg pflegen wir eine freundliche und solidarische Atmosph√§reüí¨‚ú®.\n"
            'Alle, die mitmachen, stimmen auch den Werten in unserem <a href="https://femagainstwar.notion.site/DER-FEMINISTISCHE-WIDERSTAND-GEGEN-DEN-KRIEG-MANIFEST-9897451ac0d746899bbcbdf92b9e9dc5">Manifest</a> zu.\n'
            "Wenn du dich mit dem Manifest und der Atmosph√§re wohlf√ºhlst ‚Äì schreib einfach \"Chat beitreten\"üß°",
            parse_mode='HTML'
            )
        elif query.data == 'cooperate':
            chosen_topic = "eine Zusammenarbeit vorschlagen"
            await query.message.reply_text(text="Du hast eine Idee f√ºr eine Zusammenarbeit? Super!‚úä\nErkl√§re kurz, worum es geht ‚Äì unsere Koordinato:rin wird sich bei dir melden.\n‚ÄºÔ∏èBitte schreibe alles in einer Nachricht ‚Äì wir bekommen nur die erste angezeigt!")
        elif query.data == 'question':
            chosen_topic = "eine Frage stellen"
            await query.message.reply_text(text="Du hast eine Frage? Stell sie uns einfachüßê\nUnsere Koordinator:in wird sich bald bei dir melden.\n‚ÄºÔ∏èBitte schreibe alles in einer Nachricht ‚Äì wir bekommen nur die erste angezeigt!")
        elif query.data == 'about':
            chosen_topic = "√ºber FAR Hamburg"
            await query.message.reply_text(text="Hallo! Wir sind das Kollektiv FAR Hamburgüñ§\n" 
            "Unsere Werte sind: Solidarit√§t mit der Ukraine, Unterst√ºtzung politischer Gefangener, Einsatz f√ºr Frauenrechte und den Schutz der queeren Community."
            "\nWir organisieren Veranstaltungen und Spendenaktionen f√ºr unterst√ºtzende Organisationen."
            "\nMach mit ‚Äì gemeinsam k√∂nnen wir mehr bewegen!"
            "\nAlle Links und unsere Social Media findest du hier\nüëâ linktr.ee/far_hamburg"
                
            )
    elif user_lang == '—Ä—É—Å—Å–∫–∏–π':
        if query.data == 'join':
            chosen_topic = "—Å—Ç–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏:—Ü–µ–π"
            await query.message.reply_text(text="–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Å—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π —É—á–∞—Å—Ç–Ω–∏—Ü–µ–π –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —è—á–µ–π–∫–∏ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µüå±\n"
            "–ù–∞—à–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä:–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏.\n‚ÄºÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –º—ã –ø–æ–ª—É—á–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ!")
        elif query.data == 'join_chat':
            await query.message.reply_text(
            '–í —á–∞—Ç–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏:—Ü –§–ê–° –ì–∞–º–±—É—Ä–≥ –º—ã —Å–æ–∑–¥–∞—ë–º –¥—Ä—É–∂–µ–ª—é–±–Ω—É—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—Éüí¨‚ú®.\n'
            '–¢–∞–∫–∂–µ, –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏:—Ü—ã —Å–æ–≥–ª–∞—à–∞—é—Ç—Å—è —Å —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏, –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –≤ –Ω–∞—à–µ–º <a href="https://femagainstwar.notion.site/manifest">–º–∞–Ω–∏—Ñ–µ—Å—Ç–µ</a>.\n'
            '–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –∏ —Ç—ã –∑–∞ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É ‚Äî –Ω–∞–ø–∏—à–∏ \"–í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç\" üß°',
            parse_mode='HTML'
            )
        elif query.data == 'cooperate':
            chosen_topic = "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ"
            await query.message.reply_text(text="–£ —Ç–µ–±—è –µ—Å—Ç—å –∏–¥–µ—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞? –û—Ç–ª–∏—á–Ω–æ!‚úä\n–û–ø–∏—à–∏ —Å–≤–æ—é –∏–¥–µ—é ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä:–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π.\n"
            "‚ÄºÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –º—ã –ø–æ–ª—É—á–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ!")
        elif query.data == 'question':
            chosen_topic = "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
            await query.message.reply_text(text="–•–æ—á–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Çüßê\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä:–∫–∞ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç."
            "\n‚ÄºÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –º—ã –ø–æ–ª—É—á–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ!")
        elif query.data == 'about':
            chosen_topic = "–æ –§–ê–° –ì–∞–º–±—É—Ä–≥"
            await query.message.reply_text(text="–ü—Ä–∏–≤–µ—Ç! –ú—ã ‚Äì –∫–æ–ª–ª–µ–∫—Ç–∏–≤ –§–ê–° –ì–∞–º–±—É—Ä–≥üñ§\n"
            "–ù–∞—à–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ ‚Äì —Å–æ–ª–∏–¥–∞—Ä–Ω–æ—Å—Ç—å —Å –£–∫—Ä–∞–∏–Ω–æ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª–∏—Ç–∑–∞–∫–ª—é—á—ë–Ω–Ω—ã—Ö, –∑–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ –∂–µ–Ω—â–∏–Ω –∏ –∫–≤–∏—Ä-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞.\n"
            "–ú—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–±–æ—Ä—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–º–æ–≥–∞—é—â–∏—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π.\n"
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º ‚Äî –≤–º–µ—Å—Ç–µ –º—ã —Å–¥–µ–ª–∞–µ–º –±–æ–ª—å—à–µ!\n"
            "–í—Å–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –Ω–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ —Ç—ã –Ω–∞–π–¥—ë—à—å –∑–¥–µ—Å—å\nüëâ linktr.ee/far_hamburg"
            )
# topic button handler



# define commands
#####################################################################

#start command handler
async def start(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text('ü•∞–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —á–∞—Ç-–±–æ—Ç –§–ê–° –ì–∞–º–±—É—Ä–≥.// ü•∞Hallo! Ich bin der Chat-Bot von FAR Hamburg.\n\n–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:‚§µÔ∏è // W√§hle bitte eine Sprache‚§µÔ∏è', reply_markup=language_keyboard)
    return ASKING_LANGUAGE



#####################################################################
app = ApplicationBuilder().token(TOKEN).build()
#####################################################################

app.add_handler(MessageHandler(filters.Regex(
    r'^Deutsch$|^–†—É—Å—Å–∫–∏–π$'), handle_language))



# forward message to an admin

#message handler

async def handle_message(update: Update, context: CallbackContext) -> int:
    user_message = update.message.text
    user_id = update.message.from_user.id

    if user_id not in user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /start.")
        return ConversationHandler.END

    language = user_data[user_id]['language']
    chosen_topic = user_data[user_id]['topic']

    # üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è ‚Äî –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    if chosen_topic == 'join_chat' and user_message.strip().lower() in [
        "—Ö–æ—á—É –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç", "ich m√∂chte dem chat beitreten"
    ]:
        message_to_admin = (
            f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ —á–∞—Ç\n"
            f"–ò–º—è: {update.effective_user.first_name}\n"
            f"–ù–∏–∫: @{update.effective_user.username}"
        )
        await context.bot.send_message(chat_id=GROUP_ID, text=message_to_admin)

        if language == 'deutsch':
            await update.message.reply_text("Ihre Anfrage wurde gesendet. Eine:r Koordinator:in wird Ihnen bald den Link zum Chat schicken.")
        elif language == '—Ä—É—Å—Å–∫–∏–π':
            await update.message.reply_text("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä:–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

        del user_data[user_id]
        return ConversationHandler.END

    # üîπ –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–µ
    message_to_admin = (
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:–Ω–∏—Ü—ã\n"
        f"–ò–º—è: {update.effective_user.first_name}\n"
        f"–ù–∏–∫: @{update.effective_user.username}\n"
        f"–¢–µ–º–∞: #{chosen_topic}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
    )

    await context.bot.send_message(chat_id=GROUP_ID, text=message_to_admin)

    if language == 'deutsch':
        await update.message.reply_text('Ihre Nachricht wurde gesendet. Eine:r unserer Koordinator:innen wird sich in K√ºrze bei Ihnen melden.')
    elif language == '—Ä—É—Å—Å–∫–∏–π':
        await update.message.reply_text('–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ –Ω–∞—à–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä:–æ–∫ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')

    del user_data[user_id]
    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å /start.")
    if update.message.from_user.id in user_data:
        del user_data[update.message.from_user.id]
    return ConversationHandler.END

# Define ConversationHandler
conv_handler = ConversationHandler(
    entry_points=[CommandHandler('start', start)],
    states={
        ASKING_LANGUAGE: [MessageHandler(filters.Regex(r'^Deutsch$|^–†—É—Å—Å–∫–∏–π$'), handle_language)],
        ASKING_MESSAGE: [CallbackQueryHandler(handle_inline_button), MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
    },
    fallbacks=[CommandHandler('cancel', cancel)]
)
#####################################################################
# add commands
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_inline_button))
app.add_handler(MessageHandler(filters.TEXT, handle_message))
app.add_handler(conv_handler)

#####################################################################
# run
app.run_polling()
